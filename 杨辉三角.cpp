#include <stdio.h>

int main(void)
{
	int i, j;
	int val;
	
	printf("请输入杨辉三角的层数："); 
	scanf("%d", &val);
	
	int a[val][val];//不能用未初始化的变量确定数组的长度，所以第11行的代码不能转移到第7行 

	for (i=0; i<val; i++)//构造杨辉三角的"1"的三角"外壳" 
	{
		a[i][0] = 1;//第i行第1列都为1 
		a[i][i] = 1;//第i行第i列都为1 
	}
	
	//此时在逻辑上i为二维数组的行数，j为列数 
	for (i=2; i<val; i++)//因为第1和第2行都为"外壳"，所以运算结果从第3行开始 
	{
		for (j=1; j<i; j++)//因为第1列都为"外壳"，所以运算结果从第2列开始 
		{
			a[i][j] = a[i-1][j-1] + a[i-1][j];//运算结果变量由该变量的"上面"和"左上角"的变量相加而来 
		}
	}
	
/*
-----------------------------------------------------
当未进行后面的程序时(未进行对齐)，在内部运行结果展示： 
1
1    1
1    2    1
1    3    3    1
1    4    6    4    1
1    5   10   10    5    1
1    6   15   20   15    6    1
1    7   21   35   35   21    7    1
1    8   28   56   70   56   28    8    1
1    9   36   84  126  126   84   36    9    1
-----------------------------------------------------
*/ 
	
	for (i=0; i<val; i++)//总共有val行 
	{
		for (j=val-1; j>i; --j)
		{
			printf("    ");//4位空格 
		}
		for (j=0; j<=i; ++j)//总共有val列 
		{
			printf("%8d", a[i][j]);//8位有效数字 
		}
		printf("\n");
	}
	return 0;
}
/*
-----------------------------------------------------
2020年12月3日 22点19分

结论：
	此处使用了二维数组解决平面打印和平面上的坐标计算，解决了杨辉三角问题。
	 
请输入杨辉三角的层数：10
                                           1
                                       1       1
                                   1       2       1
                               1       3       3       1
                           1       4       6       4       1
                       1       5      10      10       5       1
                   1       6      15      20      15       6       1
               1       7      21      35      35      21       7       1
           1       8      28      56      70      56      28       8       1
       1       9      36      84     126     126      84      36       9       1

-----------------------------------------------------
*/ 
